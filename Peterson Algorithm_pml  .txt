/* Peterson's solution to the mutual exclusion problem - 1981 */
2	
3	/*Peterson's Algorithm : 
                   There is no starvation, each process progresses without being stuck, and critical section is accessed by b                    oth processes over and over again.

                  flag indicates the desire to enter the critical section
                  turn is used by a process to allow the other finish waiting and proceed to critical section */
4	
5		bool turn, flag[2];
6		bool critical[2];
7	
8		active [2] proctype user()
9		{
10	 	 	assert(_pid == 0 || _pid == 1);
11		again:
12	 	 	flag[_pid] = 1;
13	  		turn = _pid;
14	  		(flag[1 - _pid] == 0 || turn == 1 - _pid);
15	  
16	  		critical[_pid] = 1;
17	  			/* critical section */
18	  		critical[_pid] = 0;
19	 	 	
20			flag[_pid] = 0;
21	 	 	goto again;   
22		}
23	
24	
25	
26	/* Mutual Exclusion being satidfied  */
27	/*Safety property Fairness and Liveliness Properties */
28	/* no errors */
29	
30	/*  ltl first  { [] (!critical[1] || !critical[1]) } */  
31	
32	
33	/* No starvation */ 
38.0	
34	    /*  ltl second  {[]<> (critical[0]) || []<> (critical[1])} */
35	 /*  ltl third { [] ((critical[0] -> critical [1]) ||   (critical[1] -> critical[0])) } */
36	
37	
38	

